#taint node01にこのキーバリューを持ったリソースをスケジュールしない　表記方法　key=value:effect
controlplane ~ ➜  k taint node node01 spray=mortein:NoSchedule　＃スケジューリングを禁止
node/node01 tainted

# このポッドはデプロイできる
apiVersion: v1
kind: Pod
metadata:
  name: bee
spec:
  containers:
  - image: nginx
    name: bee
  tolerations: #許容という意味
  - key: spray
    value: mortein
    effect: NoSchedule
    operator: Equal　#上のテイントと一致するやつを無視する

# cpからtaintを削除する。　ノードのヤムルを見ればtaintが確認できる
controlplane ~ ➜  k taint node controlplane node-role.kubernetes.io/control-plane=:NoSchedule-
node/controlplane untainted

# grep -i をしないと大文字の区別されない　　case-insensitiveと英語ではいうらしい
controlplane ~ ✖ kubectl  describe nodes controlplane |grep taints -i
Taints:             <none>


# アフィニティを使用して特定のノードにデプロイする。まずはノードにラベルをつける
k label nodes node01 color=blue

#アフィニティでキーバリューを指定。　k８sドキュメンとからそのまま持って来れる
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blue
spec:
  replicas: 3
  selector:
    matchLabels:
      run: nginx
  template:
    metadata:
      labels:
        run: nginx
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:　#ノードにポッドをスケジュールする指定。他にもあるけどとりまこれだけ覚えておけば良し
            nodeSelectorTerms:
            - matchExpressions:
              - key: color
                operator: In
                values: #ここがvaluesなのでリストで記載しないといけない
                - blue

keyさえ合っていれば良い場合はoperatorをexistsにする
--------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: red
spec:
  replicas: 2
  selector:
    matchLabels:
      run: nginx
  template:
    metadata:
      labels:
        run: nginx
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists


#インターフェースの確認
controlplane ~ ➜  k get nodes -owide
NAME           STATUS   ROLES           AGE     VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION   CONTAINER-RUNTIME
controlplane   Ready    control-plane   9m18s   v1.29.0   192.16.127.9    <none>        Ubuntu 22.04.4 LTS   5.4.0-1106-gcp   containerd://1.6.26
node01         Ready    <none>          8m35s   v1.29.0   192.16.127.12   <none>        Ubuntu 22.04.3 LTS   5.4.0-1106-gcp   containerd://1.6.26
controlplane ~ ➜  ip a |grep 192.16.127.9
    inet 192.16.127.9/24 brd 192.16.127.255 scope global eth0
macアドレスの確認
controlplane ~ ✖ ip link show eth0
6829: eth0@if6830: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UP mode DEFAULT group default 
    link/ether 02:42:c0:10:7f:09 brd ff:ff:ff:ff:ff:ff link-netnsid 0






